# -*- coding: utf-8 -*-
"""PromptFlowAI

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1xZ7vvcHOvRWoa9vVQKxD19LquDEMKOBa
"""

# PromptFlowAI - Starter Code

"""
PromptFlowAI: A professional prompt engineering toolkit for research, career, and educational applications.
This repository provides foundational tools to generate, manage, and improve prompts designed for generative AI models such as ChatGPT, Claude, and Gemini.
"""

# ========== IMPORTS ==========
import json
from typing import List, Dict

# ========== SAMPLE PROMPT PACK ==========

prompt_pack: List[Dict[str, str]] = [
    {
        "title": "Generate a research abstract",
        "category": "Research",
        "prompt": "Generate a concise and academic-style abstract for a research paper about {topic}. The tone should be formal and suitable for publication."
    },
    {
        "title": "Summarize a scientific article",
        "category": "Research",
        "prompt": "Summarize the key points and findings of the following scientific article: {input}. Use a formal academic tone."
    },
    {
        "title": "Create a research introduction",
        "category": "Research",
        "prompt": "Write an introduction section for a research paper on {topic}. Include the background, problem statement, and objectives."
    },
    {
        "title": "Generate research questions",
        "category": "Research",
        "prompt": "Formulate 3–5 research questions based on the topic: {topic}. Make them specific, clear, and researchable."
    },
    {
        "title": "Design a methodology section",
        "category": "Research",
        "prompt": "Write a methodology section for a study on {topic}. Include details on design, data collection, and analysis."
    },
    {
        "title": "Paraphrase academic paragraph",
        "category": "Research",
        "prompt": "Paraphrase the following academic paragraph while maintaining its technical accuracy: {input}."
    },
    {
        "title": "Generate literature review prompts",
        "category": "Research",
        "prompt": "Create a prompt for summarizing literature on the topic: {topic}. Include keywords, timeline, and academic focus."
    },
    {
        "title": "Generate a research conclusion",
        "category": "Research",
        "prompt": "Write a conclusion section for a research paper about {topic}. Recap the findings, implications, and future directions."
    },
    {
        "title": "Proofread and enhance research text",
        "category": "Research",
        "prompt": "Proofread and improve the following academic text for clarity, grammar, and formal tone: {input}."
    },
    {
        "title": "Translate abstract to academic English",
        "category": "Research",
        "prompt": "Translate the following research abstract into high-quality academic English: {input}."
    }
]

# ========== SAVE PROMPTS TO JSON ==========
def save_prompt_pack(prompt_data: List[Dict[str, str]], filename: str):
    """
    Saves a list of prompt dictionaries to a JSON file.

    Args:
        prompt_data (List[Dict[str, str]]): List of prompts.
        filename (str): Output file name.
    """
    with open(filename, 'w', encoding='utf-8') as f:
        json.dump(prompt_data, f, indent=2, ensure_ascii=False)
        print(f"✅ Prompt pack saved to {filename}")

# ========== ENTRY POINT ==========
if __name__ == "__main__":
    save_prompt_pack(prompt_pack, "research_prompts.json")